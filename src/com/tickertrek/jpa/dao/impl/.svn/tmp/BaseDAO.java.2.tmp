/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.tickertrek.jpa.dao.impl;

import com.bullfinder.exception.BullFinderException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import javax.persistence.EntityManagerFactory;
import com.spaceprogram.simplejpa.EntityManagerFactoryImpl;
import com.tickertrek.jpa.entity.Order;
import com.tickertrek.jpa.entity.Strategy;
import com.tickertrek.jpa.entity.UserAuth;
import com.tickertrek.jpa.entity.UserProfile;
import com.tickertrek.jpa.util.JPAUtil;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import javax.persistence.Query;
import javax.persistence.EntityManager;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Uttam
 */
public class BaseDAO {

    static{
        intializeEntityManager();
    }
    private static final Logger logger = Logger.getLogger(BaseDAO.class.getName());
    public static EntityManagerFactory factory;

    private static void intializeEntityManager(){
        Properties awsProps = new Properties();

        try {
            awsProps.load(BaseDAO.class.getResourceAsStream("/AwsCredentials.properties"));
            Map<String,String> props = new HashMap<String,String>();
            props.put("secretKey", awsProps.getProperty("secretKey"));
            props.put("accessKey", awsProps.getProperty("accessKey"));
            factory = new EntityManagerFactoryImpl("RR", props);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected static EntityManagerFactory getEntityManager(){
        if(factory == null)
            intializeEntityManager();
        return factory;
    }
    protected BullFinderException createCustomizedException(Exception exp){
        if(exp instanceof BullFinderException)
            return (BullFinderException)exp;
        else return new BullFinderException(exp);
    }

    protected Date getCurrentDateInFormat(){
        Date currentDate = new Date(System.currentTimeMillis());

        return currentDate;
    }
    protected Date formatDateBack(Date date){
        return date;
    }
    
    

    public static void main(String args[])throws Exception{
        System.out.println("Initialized entity manager factory.");

        EntityManager em = factory.createEntityManager();

        /*UserProfile profile = new UserProfile();
        JPAUtil.setDummyData(profile);
        profile.setEmail("bullfinder12345@gmail.com");
        System.out.println("UserProfile before persistance:"+JPAUtil.getJSON(profile));
        UserAuth user = new UserAuth();
        JPAUtil.setDummyData(user);
        em.persist(profile);
        System.out.println("UserProfile after persistance:"+JPAUtil.getJSON(profile));
        */
        Query query = em.createQuery("select p from com.tickertrek.jpa.entity.PublicUserProfile p where p.email=:email");
        query.setParameter("email", "dummyemail1@gmail.com");

        List<UserProfile> profiles = query.getResultList();
        
        
        
        String[] c = {"password"};
        for(UserProfile p : profiles){
            //System.out.println("inside last query:"+JPAUtil.getJSON(p));
            query = em.createQuery("select u from com.tickertrek.jpa.entity.UserAuth u where u.id = :p");
            query.setParameter("p", p.getId());
            List<UserAuth> a = query.getResultList();
            
            query = em.createQuery("select s from com.tickertrek.jpa.entity.Strategy s where s.userid = :s");
            query.setParameter("s", p.getId());
            List<Strategy> s = query.getResultList();
            
            
            System.out.println("Printing data :");
            System.out.println("Profile:" + JPAUtil.getJSON(p));
            System.out.println("UserAuth:  "+JPAUtil.getJSON(a.get(0)));
            OrderDAOImpl odi = new OrderDAOImpl();
            for(Strategy st : s){
                System.out.println("Strategy:  "+JPAUtil.getJSON(st));
                JSONObject reply = odi.getOrders(st, "desc", "initiatetime", 1, 20);
                JSONArray orders = reply.getJSONArray("orders");
                for(int i=0;i < orders.length();i++  )
                    System.out.println("Order:  "+orders.get(i));
            }
        
            //System.out.println(profile);
            //System.out.println(auth);
        }

        /*List<UserProfile> profiles = query.getResultList();
        System.out.println("Printing the userprofiles, count:"+profiles.size());
        //System.out.println("profile 1:"+auths.get(0));
        for(UserProfile profile : profiles){
            System.out.println(profile);
        }*/


        /*EntityManagerFactory emf = getEntityManager();
        Strategy s = new Strategy();
        // Set dummy data for all vars except id
        JPAUtil.setDummyData(s);
        EntityManager em =  emf.createEntityManager();
        em.persist(s);*/

        em.clear();
        factory.close();
        
    }
    
    public void clearAllDomains() throws BullFinderException {
        EntityManager em = null;
        String domains[] = {"PublicUserProfile","UserAuth","Strategy","Championship", "ChampUserProfile","StrategyUserProfile",
                                "MonthlyReturn", "YearlyReturn","Sector","Ts"};
        try {
            em = factory.createEntityManager();
            for(int i =0 ; i < domains.length ; i++){
                System.out.println("Trying to delete entity:"+domains[i]);
                String q = "select o from com.tickertrek.jpa.entity." + domains[i] + " o";
                Query query = em.createQuery(q);
                List<Object> list = query.getResultList();
                for(Object obj : list)
                    em.remove(obj);
            }
           
           
        }catch(Exception e){
            e.printStackTrace();
            
        
        }finally {
            if (em!=null) {
                em.close();
            }
        }
    }
    public void persistEntity(Object e) throws BullFinderException {
        EntityManager em = null;

        try {
            em = factory.createEntityManager();
            em.persist(e);
        }
        finally {
            if (em!=null) {
                em.close();
            }
        }
    }

}
